<html>
    <head>
        <title>Braden Fisher Exam 3 [UNUS]</title>

        <!-- Bootstrap -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

        <!-- Bootstrap icons -->
        <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet" />

        <!-- charts -->
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

        <!-- Data table -->
        <link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />
        <script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>

        <!-- Animation -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>

        <!-- Map -->
        <link href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" rel="stylesheet" />
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

        <!-- sweetalert2 -->
        <link href="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.8.0/sweetalert2.min.css" rel="stylesheet" />
        <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.8.0/sweetalert2.all.min.js"></script>

        <!-- moment js for date -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>


        <link href="https://juxinglong.github.io/static/MIS3033.css" rel="stylesheet" />

    </head>

    <body style="margin:20px;">

        <div class="m-bd-callout m-bd-callout-primary" style="width:400px;">
            Braden Fisher [UNUS]
        </div>

        <div class="alert alert-primary text-uppercase fw-bold" style="width:600px;">
            Restaurant System
        </div>

        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link active" href="~/home/index" target="_self">Orders</a>
            </li>

            <li class="nav-item">
                <a class="nav-link" href="~/home/chart" target="_self">Summary</a>
            </li>
        </ul>

        <div class="m-bd-callout m-bd-callout-primary" style="width:500px;">
            Order Information

            <div class="input-group">
                <label class="input-group-text">Order ID</label>
                <input id="orderid" type="text" class="form-control" />
            </div>

            <div class="input-group">
                <label class="input-group-text">Subtotal amount$</label>
                <input id="subamount" type="text" class="form-control" />
            </div>

            <div class="input-group">
                <label class="input-group-text">Tip amount</label>
                <input id="tipamount" type="text" class="form-control" />
            </div>

            <div>
                <button id="addbtn" class="btn btn-sm btn-primary">Add</button>
                <button id="editbtn" class="btn btn-sm btn-warning">Edit</button>
                <button id="deletebtn" class="btn btn-sm btn-primary">Delete</button>

                <span id="status" class="badge"></span>
            </div>

            <div id="table"></div>

        </div>

        <script>

            "use strict";
            var rootPath = '@Url.Content("~/")';

            var g;
            var grid = null;

            {
                let btn;

                /////////////////////////////////////////////////////
                //delete order

                btn = document.querySelector("#deletebtn");
                btn.addEventListener("click", () => {
                    deleteOrder();
                });

                async function deleteOrder() 
                {
                    let fd = new FormData();
                    fd.append('orderid', document.querySelector("#orderid").value);

                    let status = document.querySelector("#status");

                    let r = await fetch(rootPath + "home/DeleteOrder", { method: "post", cache: "no-store", body: fd });

                    if (r.ok == true) 
                    {
                        let rj = await r.json();

                        status.classList.remove("text-bg-danger");
                        status.classList.add("text-bg-success");
                        status.innerHTML = rj.message;

                        ShowTable();

                        Swal.fire({
                            icon: "success",
                            title: "Success",
                            text: "Delete order successfully",
                        });
                    }
                    else 
                    {
                        status.classList.remove("text-bg-success");
                        status.classList.add("text-bg-danger");
                        status.innerHTML = "Failed to delete order!!!";

                        Swal.fire({
                            icon: "error",
                            title: "Failed",
                            text: "Delete order failed",
                        });
                    }
                }//end of delete order
                /////////////////////////////////////////////////////

                /////////////////////////////////////////////////////
                //edit order

                btn = document.querySelector("#editbtn");
                btn.addEventListener("click", () => {
                    editOrder();
                });

                async function editOrder() 
                {
                    let fd = new FormData();
                    fd.append('orderid', document.querySelector("#orderid").value);
                    fd.append('subtotal', document.querySelector("#subamount").value);
                    fd.append('tip', document.querySelector("#tipamount").value);

                    let status = document.querySelector("#status");

                    let r = await fetch(rootPath + "home/EditOrder", { method: "post", cache: "no-store", body: fd });

                    if (r.ok == true) 
                    {
                        let rj = await r.json();

                        status.classList.remove("text-bg-danger");
                        status.classList.add("text-bg-success");
                        status.innerHTML = rj.message;

                        ShowTable();

                        Swal.fire({
                            icon: "success",
                            title: "Success",
                            text: "Edit order successfully",
                        });
                    }
                    else {
                        status.classList.remove("text-bg-success");
                        status.classList.add("text-bg-danger");
                        status.innerHTML = "Failed to edit order!!!";

                        Swal.fire({
                            icon: "error",
                            title: "Failed",
                            text: "Edit order failed",
                        });
                    }
                }//end of edit order
                /////////////////////////////////////////////////////

                /////////////////////////////////////////////////////
                //add order

                btn = document.querySelector("#addbtn");
                btn.addEventListener("click", () => {
                    addOrder();
                });

                async function addOrder()
                {
                    let fd = new FormData();
                    fd.append('orderid', document.querySelector("#orderid").value);
                    fd.append('subtotal', document.querySelector("#subamount").value);
                    fd.append('tip', document.querySelector("#tipamount").value);

                    let status = document.querySelector("#status");

                    let r = await fetch(rootPath + "home/AddOrder", {method:"post", cache:"no-store", body:fd});

                    if(r.ok == true)
                    {
                        let rj = await r.json();

                        status.classList.remove("text-bg-danger");
                        status.classList.add("text-bg-success");
                        status.innerHTML = rj.message;

                        ShowTable();

                        Swal.fire({
                            icon: "success",
                            title: "Success",
                            text: "Add order successfully",
                        });
                    }
                    else
                    {
                        status.classList.remove("text-bg-success");
                        status.classList.add("text-bg-danger");
                        status.innerHTML = "Failed to add order!!!";

                        Swal.fire({
                            icon:"error",
                            title: "Failed",
                            text: "Add order failed",
                        });
                    }
                }//end of add order
                /////////////////////////////////////////////////////

                async function ShowTable()
                {
                    if(grid != null)
                    {
                        grid.destory();
                    }

                    let table = document.querySelector("#table");
                    table.innerHTML = "";

                    let r = await fetch(rootPath + "home/GetOrders", {method:"post", cache:"no-store"});
                    let rj = await r.json();

                    let params = {
                        data:rj,
                        search: true,
                        sort: true,
                        pagination: {limit:5},
                        width:1000,
                        columns:[{id: "orderid", name: "Order ID"},
                        { id: "subamount", name: "Subtotal Amount" },
                        { id: "tipamount", name: "Tip Amount" },
                        { id: "tipratio", name: "Tip Ratio" },
                        { id: "tipratiolevel", name: "Tip Ratio Level" }],
                    };
                    grid = new gridjs.Grid(params);
                    grid.render(table);
                }
                ShowTable();
            }

        </script>

    </body>  

</html>
